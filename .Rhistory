new_vector = st_read(vector_filepath)
st_crs(new_vector) # get CRS
new_vector = st_set_crs(new_vector, 4326) # set CRS
projection(new_raster) # get CRS
source('~/Documents/GitHub/GeoComputationWithR/R/GeoComputation.R')
library(leaflet)
popup = c("Bijesh", "Rajesh", "Shyam")
leaflet() %>%
addProviderTiles("NASAGIBS.ViirsEarthAtNight2012") %>%
addMarkers(lng = c(-3, 18, 15),
lat = c(52, 53, 49),
popup = popup)
library(leaflet)
popup = c("Bijesh", "Rajesh", "Shyam")
leaflet() %>%
addProviderTiles("NASAGIBS.ViirsEarthAtNight2012") %>%
addMarkers(lng = c(-3, 23, 11),
lat = c(52, 53, 49),
popup = popup)
library(leaflet)
popup = c("Bijesh", "Rajesh", "Shyam")
leaflet() %>%
addProviderTiles("NASAGIBS.ViirsEarthAtNight2012") %>%
addMarkers(lng = c(-3, 50, 11),
lat = c(52, 80, 49),
popup = popup)
library(leaflet)
popup = c("Bijesh", "Rajesh", "Shyam")
leaflet() %>%
addProviderTiles("NASAGIBS.ViirsEarthAtNight2012") %>%
addMarkers(lng = c(-3, 20, 11),
lat = c(52, 10, 49),
popup = popup)
library(leaflet)
popup = c("Bijesh", "Rajesh", "Shyam")
leaflet() %>%
addProviderTiles("NASAGIBS.ViirsEarthAtNight2012") %>%
addMarkers(lng = c(-3, 9, 11),
lat = c(52, 15, 49),
popup = popup)
library(leaflet)
popup = c("Bijesh", "Rajesh", "Shyam")
leaflet() %>%
addProviderTiles("NASAGIBS.ViirsEarthAtNight2012") %>%
addMarkers(lng = c(-3, -1, 11),
lat = c(52, -15, 49),
popup = popup)
library(leaflet)
popup = c("Bijesh", "Rajesh", "Shyam")
leaflet() %>%
addProviderTiles("NASAGIBS.ViirsEarthAtNight2012") %>%
addMarkers(lng = c(-3, 23, 11),
lat = c(52, 53, 49),
popup = popup)
library(leaflet)
popup = c("Bijesh", "Rajesh", "Shyam")
leaflet() %>%
addProviderTiles("NASAGIBS.ViirsEarthAtNight2012") %>%
addMarkers(lng = c(-80, 23, 11),
lat = c(-80, 53, 49),
popup = popup)
library(leaflet)
popup = c("Bijesh", "Rajesh", "Shyam")
leaflet() %>%
addProviderTiles("NASAGIBS.ViirsEarthAtNight2012") %>%
addMarkers(lng = c(80, 23, 11),
lat = c(80, 53, 49),
popup = popup)
library(leaflet)
popup = c("Bijesh", "Rajesh", "Shyam")
leaflet() %>%
addProviderTiles("NASAGIBS.ViirsEarthAtNight2012") %>%
addMarkers(lng = c(30, 23, 11),
lat = c(80, 53, 49),
popup = popup)
library(leaflet)
popup = c("Bijesh", "Rajesh", "Shyam")
leaflet() %>%
addProviderTiles("NASAGIBS.ViirsEarthAtNight2012") %>%
addMarkers(lng = c(120, 23, 11),
lat = c(80, 53, 49),
popup = popup)
library(leaflet)
popup = c("Bijesh", "Rajesh", "Shyam")
leaflet() %>%
addProviderTiles("NASAGIBS.ViirsEarthAtNight2012") %>%
addMarkers(lng = c(100, 23, 11),
lat = c(120, 53, 49),
popup = popup)
library(leaflet)
popup = c("Bijesh", "Rajesh", "Shyam")
leaflet() %>%
addProviderTiles("NASAGIBS.ViirsEarthAtNight2012") %>%
addMarkers(lng = c(100, 23, 11),
lat = c(10, 53, 49),
popup = popup)
library(leaflet)
popup = c("Bijesh", "Rajesh", "Shyam")
leaflet() %>%
addProviderTiles("NASAGIBS.ViirsEarthAtNight2012") %>%
addMarkers(lng = c(90, 23, 11),
lat = c(20, 53, 49),
popup = popup)
library(leaflet)
popup = c("Bijesh", "Rajesh", "Shyam")
leaflet() %>%
addProviderTiles("NASAGIBS.ViirsEarthAtNight2012") %>%
addMarkers(lng = c(90, 23, 11),
lat = c(15, 53, 49),
popup = popup)
library(leaflet)
popup = c("Bijesh", "Rajesh", "Shyam")
leaflet() %>%
addProviderTiles("NASAGIBS.ViirsEarthAtNight2012") %>%
addMarkers(lng = c(90, 23, 11),
lat = c(25, 53, 49),
popup = popup)
library(leaflet)
popup = c("Bijesh", "Rajesh", "Shyam")
leaflet() %>%
addProviderTiles("NASAGIBS.ViirsEarthAtNight2012") %>%
addMarkers(lng = c(85, 23, 11),
lat = c(25, 53, 49),
popup = popup)
library(leaflet)
popup = c("Bijesh", "Rajesh", "Shyam")
leaflet() %>%
addProviderTiles("NASAGIBS.ViirsEarthAtNight2012") %>%
addMarkers(lng = c(80, 23, 11),
lat = c(25, 53, 49),
popup = popup)
library(leaflet)
popup = c("Bijesh", "Rajesh", "Shyam")
leaflet() %>%
addProviderTiles("NASAGIBS.ViirsEarthAtNight2012") %>%
addMarkers(lng = c(80, 23, 11),
lat = c(22, 53, 49),
popup = popup)
library(leaflet)
popup = c("Bijesh", "Rajesh", "Shyam")
leaflet() %>%
addProviderTiles("NASAGIBS.ViirsEarthAtNight2012") %>%
addMarkers(lng = c(80, 23, 11),
lat = c(28, 53, 49),
popup = popup)
library(leaflet)
popup = c("Bijesh", "Rajesh", "Shyam")
leaflet() %>%
addProviderTiles("NASAGIBS.ViirsEarthAtNight2012") %>%
addMarkers(lng = c(80, 23, 11),
lat = c(30, 53, 49),
popup = popup)
library(leaflet)
popup = c("Bijesh", "Rajesh", "Shyam")
leaflet() %>%
addProviderTiles("NASAGIBS.ViirsEarthAtNight2012") %>%
addMarkers(lng = c(85, 23, 11),
lat = c(30, 53, 49),
popup = popup)
library(leaflet)
popup = c("Bijesh", "Rajesh", "Shyam")
leaflet() %>%
addProviderTiles("NASAGIBS.ViirsEarthAtNight2012") %>%
addMarkers(lng = c(82, 23, 11),
lat = c(30, 53, 49),
popup = popup)
library(leaflet)
popup = c("Bijesh", "Rajesh", "Shyam")
leaflet() %>%
addProviderTiles("NASAGIBS.ViirsEarthAtNight2012") %>%
addMarkers(lng = c(83, 23, 11),
lat = c(30, 53, 49),
popup = popup)
library(leaflet)
popup = c("Bijesh", "Rajesh", "Shyam")
leaflet() %>%
addProviderTiles("NASAGIBS.ViirsEarthAtNight2012") %>%
addMarkers(lng = c(-3, 23, 11),
lat = c(52, 53, 49),
popup = popup)
source('~/Documents/GitHub/GeoComputationWithR/R/GeoComputation.R')
#current system time
Sys.time()
# current system timezone:
Sys.chmod()
# current system timezone:
Sys.timezone()
# Changed time zone to
Sys.setenv( TZ = Kathmandu/Nepal)
# Changed time zone to
Sys.setenv( TZ = "Kathmandu")
Sys.time()
Sys.timezone()
Sys.time()
Sys.timezone()
# current system timezone:
Sys.timezone()
Sys.timezone()
Sys.time()
source('~/Documents/GitHub/GeoComputationWithR/R/GeoComputation.R')
example
example("tidyverse")
max.plot = 14
summary(world["lifeExp"])
world_mini = world[1:2, 1:3]
world_mini
View(world)
View(world_mini)
View(world_mini)
View(world)
world_sp = as(world, Class = "Spatial")
# Set working directory:
setwd("~/Documents/GitHub/GeoComputationWithR")
# ##### Contribute  (Not Necesssary for Class) #####
# devtools::install_github("geocompr/geocompkg") #Reporduce code in the book.
# library(bookdown)
# bookdown::render_book("index.Rmd") # to build the book locally.
# browseURL("_book/index.html") # to view it.
# ##### Homework 1: Chapter 1 (Already completed ; No Need to open) #####
# Introduction
# 1.1 What is geocomputation?: Closely related to Geographic Information science, geomatics, geoinformatics, spatial information science, geoinfomatiion engineering and geographical data science (GDS).
# 1.2 Why use R for geocomputation?
# install.packages("leaflet")
library(leaflet)
popup = c("Bijesh", "Rajesh", "Shyam") # I changed author's name. Sorry!!!
leaflet() %>%
addProviderTiles("NASAGIBS.ViirsEarthAtNight2012") %>%
addMarkers(lng = c(-3, 23, 11),
lat = c(52, 53, 49),
popup = popup)
# 1.3 Software for geocomputation: QGIS, GRASS and SAGA built on C++, C++ is fasst but hard to learn compared to python. Rcpp made C++ more accessible. Java is another important program.Python is important program for geocomputing. Packages: osgeo, Shapely, NumPy, PyGeoProcessing.
# 1.4 R’s spatial ecosystem
# 1.5 The history of R-spatial
# 1.6 Exercises
# Q1. Think about the terms "GIS" and "geocomputation" described above. Which (if any) best describe the work you would like to do  using geo* methods and software and why?
# Q2. Provide three reasons for using a scriptable language such as R for geocomputation instead of using an established GIS program such as QGIS?
# Q3. Name two advantages and two disadvantages of using mature vs recent packages for geographic data analysis (for example sf vs sp).
# Note: Python modules providing access to geoalgorithms include grass.script for GRASS, saga-python for SAGA-GIS, processing for QGIS and arcpy for ArcGIS.
# An overview of R’s spatial ecosystem can be found in the CRAN Task View on the Analysis of Spatial Data (see https://cran.r-project.org/web/views/Spatial.html).↩
# ##### Chapter 2: Geographic Data in R #####
# # Prerequisites:
# # Install Packages:
# # this step is to install library from github:
# install.packages("devtools") #install devtools package. Do not run of devtools is alread present in your machine.
# library(devtools) #load devtools before downloading packages from github.
# install_github("r-spatial/sf") #isntall sf package from github
# devtools::install_github("r-spatial/sf", type = "binary", force = TRUE) #This works without attaching devtools library.
# install.packages("raster")
# install.packages("spData")
# install.packages("devtools") #Install this package if you are installing packages from GitHub.
# devtools::install_github("Nowosad/spDataLarge", force = TRUE) #Need to add "Force = TRUE" to install this package in my MAC.
# install.packages("sf", type = "binary") #OSU IT People response: There is no such non-binary version. Homebrew and gdal packages are only necessary if you want to modify package. For, user, binary version is enough.
# Load Libraries.
library(raster) #class ad function for raster data.
library(spData) #load geographic data.
library(devtools) #used to install packages from GitHub.
library(spDataLarge) #Load larger geograpic Data.
library(sf) #class and function for vector data
# 2.2.1 An introduction to simple features:
vignette(package = "sf") # see which vignettes/descriptions are available
vignette("sf1")          # an introduction to the package
names(world) #world is spatial object containing spatial and attribute columns returned by this function.
plot(world) #plot world.
summary(world["lifeExp"]) # geom is stick with the desired variable unless it is removed. MULTIPOLYGON is seen for countries with Island.
world_mini = world[1:2, 1:3] #A subset of first two row (from row 1 to rown 2) and three columns (from column 1 to column 3). This adds additional geographical data (geometry type, dimension, bbox) and CRS information ( epsg(SRID), proj4string ) and the presence of a geometry column (geom).
world_mini
View(world)
# 2.2.2 Why simple features (sf)? #Advantage: Cross transferrable.Also supports %>%, tmap, mapview, tidycensus.
library(sp)
world_sp = as(world, Class = "Spatial")
world_sf = st_as_sf(world_sp)
# 2.2.3 Basic map making
plot(world[3:6])
plot(world["pop"])
world_asia = world[world$continent == "Asia", ]
asia = st_union(world_asia)
plot(world["pop"], reset = FALSE)
# 2.2.3 Basic map making
plot(world[3:6])
plot(world["pop"])
world_asia = world[world$continent == "Asia", ]
asia = st_union(world_asia)
plot(world["pop"], reset = FALSE)
plot(world["pop"], reset = FALSE)
plot(asia, add = TRUE, col = "red")
plot(world["continent"], reset = FALSE)
cex = sqrt(world$pop) / 10000
world_sf = st_as_sf(world_sp, "sf")
world_sf
source('~/Documents/GitHub/GeoComputationWithR/R/GeoComputation.R')
# 2.2.3 Basic map making
plot(world[3:6], add = TRUE) # similar to spplot() in sp package. Set color with "col = <color name>"
plot(world["pop"], add = TRUE)
world_sf
# Set working directory:
setwd("~/Documents/GitHub/GeoComputationWithR")
# ##### Contribute  (Not Necesssary for Class) #####
# devtools::install_github("geocompr/geocompkg") #Reporduce code in the book.
# library(bookdown)
# bookdown::render_book("index.Rmd") # to build the book locally.
# browseURL("_book/index.html") # to view it.
# ##### Homework 1: Chapter 1 (Already completed ; No Need to open) #####
# Introduction
# 1.1 What is geocomputation?: Closely related to Geographic Information science, geomatics, geoinformatics, spatial information science, geoinfomatiion engineering and geographical data science (GDS).
# 1.2 Why use R for geocomputation?
# install.packages("leaflet")
library(leaflet)
popup = c("Bijesh", "Rajesh", "Shyam") # I changed author's name. Sorry!!!
leaflet() %>%
addProviderTiles("NASAGIBS.ViirsEarthAtNight2012") %>%
addMarkers(lng = c(-3, 23, 11),
lat = c(52, 53, 49),
popup = popup)
# 1.3 Software for geocomputation: QGIS, GRASS and SAGA built on C++, C++ is fasst but hard to learn compared to python. Rcpp made C++ more accessible. Java is another important program.Python is important program for geocomputing. Packages: osgeo, Shapely, NumPy, PyGeoProcessing.
# 1.4 R’s spatial ecosystem
# 1.5 The history of R-spatial
# 1.6 Exercises
# Q1. Think about the terms "GIS" and "geocomputation" described above. Which (if any) best describe the work you would like to do  using geo* methods and software and why?
# Q2. Provide three reasons for using a scriptable language such as R for geocomputation instead of using an established GIS program such as QGIS?
# Q3. Name two advantages and two disadvantages of using mature vs recent packages for geographic data analysis (for example sf vs sp).
# Note: Python modules providing access to geoalgorithms include grass.script for GRASS, saga-python for SAGA-GIS, processing for QGIS and arcpy for ArcGIS.
# An overview of R’s spatial ecosystem can be found in the CRAN Task View on the Analysis of Spatial Data (see https://cran.r-project.org/web/views/Spatial.html).↩
# ##### Chapter 2: Geographic Data in R #####
# # Prerequisites:
# # Install Packages:
# # this step is to install library from github:
# install.packages("devtools") #install devtools package. Do not run of devtools is alread present in your machine.
# library(devtools) #load devtools before downloading packages from github.
# install_github("r-spatial/sf") #isntall sf package from github
# devtools::install_github("r-spatial/sf", type = "binary", force = TRUE) #This works without attaching devtools library.
# install.packages("raster")
# install.packages("spData")
# install.packages("devtools") #Install this package if you are installing packages from GitHub.
# devtools::install_github("Nowosad/spDataLarge", force = TRUE) #Need to add "Force = TRUE" to install this package in my MAC.
# install.packages("sf", type = "binary") #OSU IT People response: There is no such non-binary version. Homebrew and gdal packages are only necessary if you want to modify package. For, user, binary version is enough.
# Load Libraries.
library(raster) #class ad function for raster data.
library(spData) #load geographic data.
library(devtools) #used to install packages from GitHub.
library(spDataLarge) #Load larger geograpic Data.
library(sf) #class and function for vector data
# # Load data from SpDataLarge if you cannot install the package. Code from Github.
# if(!require(spDataLarge)) {
#   download.file("https://github.com/Nowosad/spDataLarge/archive/master.zip", "spDataLarge.zip")
#   unzip("spDataLarge.zip")
#   files_rda = list.files("spDataLarge-master/data/", full.names = TRUE)
#   sapply(files_rda, load, envir = .GlobalEnv)
# }
# # 2.1 Introduction
# # 2.2 Vector data
# London coordinates: c(-0.1, 51.5) is (longitude/Prime Meridiaan = degree east, Latitude/Equator = degree north) of the origin.
# In Projected CRS, above point = c(530000, 180000) is (Easting/Northing) means London is 530 km East and 180 km North of the norigin of CRS. This is British National Grid System.
# 2.2.1 An introduction to simple features:
vignette(package = "sf") # see which vignettes/descriptions are available
vignette("sf1")          # an introduction to the package
names(world) #world is spatial object containing spatial and attribute columns returned by this function.
plot(world) #plot world.
summary(world["lifeExp"]) # geom is stick with the desired variable unless it is removed. MULTIPOLYGON is seen for countries with Island.
world_mini = world[1:2, 1:3] #A subset of first two row (from row 1 to rown 2) and three columns (from column 1 to column 3). This adds additional geographical data (geometry type, dimension, bbox) and CRS information ( epsg(SRID), proj4string ) and the presence of a geometry column (geom).
world_mini
View(world)
# 2.2.2 Why simple features (sf)? #Advantage: Cross transferrable.Also supports %>%, tmap, mapview, tidycensus.
library(sp)
world_sp = as(world, Class = "Spatial") # convert to spatial class.
world_sf = st_as_sf(world_sp, "sf") # spatial object convert back to sf.
world_sf
plot(world["pop"], reset = FALSE)
plot(asia, add = TRUE, col = "red")
?graphics ::plot
?par
# 2.2.4 Base plot arguments
plot(world["continent"], reset = FALSE, main = abc) #main = for title.
# 2.2.4 Base plot arguments
plot(world["continent"], reset = FALSE) #main = for title.
# 2.2.4 Base plot arguments
plot(world["continent"], reset = FALSE, main = "abc") #main = for title.
# 2.2.4 Base plot arguments
plot(world["continent"], reset = FALSE) #main = "abc" gives as title name as abc.
source('~/Documents/GitHub/GeoComputationWithR/R/GeoComputation.R')
?graphics ::plot #help
?par #help
plot(world["continent"], reset = FALSE) #main = "abc" gives as title name as abc.
world_cents = st_centroid(world, of_largest = TRUE)
# # I got this warning message after running above line of code. This might the resaon
plot(st_geometry(world_cents), add = TRUE, cex = cex)
india = world[world$name_long == "India", ]
plot(st_geometry(india), expandBB = c(0, 0.2, 0.1, 1), col = "gray", lwd = 3) #When I run this code, the map shrink down to really tiny size and moves down to mid-bottom of plotting region.
# # I got this warning message after running above line of code. This might the resaon why map of India shrunk down and moved to mid-bottom of plot.
# Warning messages:
#   1: In st_centroid.sf(world, of_largest = TRUE) :
#   st_centroid assumes attributes are constant over geometries of x
# 2: In st_centroid.sfc(st_geometry(x), of_largest_polygon = of_largest_polygon) :
#   st_centroid does not give correct centroids for longitude/latitude data
plot(st_geometry(world_cents), add = TRUE, cex = cex)
?graphics ::plot #help
?par #help
plot(world["continent"], reset = FALSE) #main = "abc" gives as title name as abc.
world_cents = st_centroid(world, of_largest = TRUE)
# # I got this warning message after running above line of code. This might the resaon why map of India shrunk down and moved to mid-bottom of plot.
# Warning messages:
#   1: In st_centroid.sf(world, of_largest = TRUE) :
#   st_centroid assumes attributes are constant over geometries of x
# 2: In st_centroid.sfc(st_geometry(x), of_largest_polygon = of_largest_polygon) :
#   st_centroid does not give correct centroids for longitude/latitude data
plot(st_geometry(world_cents), add = TRUE, cex = cex)
india = world[world$name_long == "India", ]
plot(st_geometry(india), expandBB = c(0, 0.2, 0.1, 1), col = "gray", lwd = 3) #When I run this code, the map shrink down to really tiny size and moves down to mid-bottom of plotting region.
? st_centroid
epsg(SRID)
proj4string()
st_crs(points_sfc) #Coordinate Reference System: NA.
lnd_point = st_point(c(0.1, 51.5))                 # sfg object
lnd_geom = st_sfc(lnd_point, crs = 4326)           # sfc object
lnd_attrib = data.frame(                           # data.frame object
name = "London",
temperature = 25,
date = as.Date("2017-06-21")
)
lnd_sf = st_sf(lnd_attrib, geometry = lnd_geom)    # sf object
lnd_sf
class(lnd_sf)
lnd_point = st_point(c(0.1, 51.5))                 # sfg object
lnd_point = st_point(c(0.1, 51.5))                 # sfg object
lnd_point = st_point(c(0.1, 51.5))                 # sfg object
lnd_point = st_point(c(0.1, 51.5))                 # sfg object
lnd_attrib = data.frame(                           # data.frame
name = "London",
temperature = 25,
date = as.Date("2017-06-21")
)
lnd_sf = st_sf(lnd_attrib, geometry = lnd_geom)    # sf object
Sys.time()
Sys.timezone(location = TRUE)
lnd_point = st_point(c(0.1, 51.5))                 # sfg object
lnd_geom = st_sfc(lnd_point, crs = 4326)           # sfc object
lnd_attrib = data.frame(                           # data.frame object
name = "London",
temperature = 25,
date = as.Date("2017-06-21")
)
lnd_sf = st_sf(lnd_attrib, geometry = lnd_geom)    # sf object
source('~/Documents/GitHub/GeoComputationWithR/R/GeoComputation.R')
timezome
system.time(expr, gcFirst = TRUE)
install.packages(c("classInt", "lubridate", "optimx", "Rcpp", "reshape2", "sf", "spData", "survival", "usethis", "xml2"))
install.packages(c("classInt", "sf"))
install.packages(c("classInt", "sf"))
library(tidyverse)
library(sf)          # classes and functions for vector data
library(raster)      # classes and functions for raster data
library(spData)      # load geographic data
library(spDataLarge) # load larger geographic data
library(sp)
vignette(package = "sf") # see which vignettes are available
vignette("sf1")          # an introduction to the package
world
class(world)
str(world)
names(world)
colnames(world)
summary(world["lifeExp"])
plot(world)
devtools::install_github("Nowosad/spDataLarge, type = binary, force = TRUE")
install.packages("sf", type = "binary")
install.packages("sf", type = "binary")
devtools::install_github("Nowosad/spDataLarge", force = TRUE)
install.packages("sf", type = "binary", dependencies = TRUE)
install.packages("sf", type = "binary", dependencies = TRUE, force = TRUE)
devtools::install_github("r-spatial/sf", type = "binary", force = TRUE)
devtools::install_github("r-spatial/sf", type = "binary", force = TRUE)
install.packages("sf", type = "binary", dependencies = TRUE, force = TRUE)
names(world)
library(raster) #class ad function for raster data.
library(spData) #load geographic data.
library(devtools) #used to install packages from GitHub.
library(spDataLarge) #Load larger geograpic Data.
library(sf) #class and function for vector data
library(sp) #spatial feature.
library(leaflet)
popup = c("Robin", "Jakub", "Jannes")
leaflet() %>%
addProviderTiles("NASAGIBS.ViirsEarthAtNight2012") %>%
addMarkers(lng = c(-3, 23, 11),
lat = c(52, 53, 49),
popup = popup)
London coordinates: c(-0.1, 51.5) #c(long/easting, lat/northing)
Londoncoordinates: c(-0.1, 51.5) #c(long/easting, lat/northing)
# # 2.2 Vector data
names(world)
plot(world) #plot world.
# # ##### Install and Load Packages #####
# install.packages("tidyverse", dependencies = TRUE)
# install.packages("sf", type = "binary", dependencies = TRUE, force = TRUE)
# install.packages("raster", dependencies = TRUE)
# install.packages("spData", dependencies = TRUE)
# if (!require("devtools")) install.packages("devtools")
# devtools::install_github("Nowosad/spDataLarge", force = TRUE)
# install.packages("sp", dependencies = TRUE)
# install.packages("leaflet", dependencies = TRUE)
names(world)
plot(world) #plot world.
world$geom #coordinates of the country polygons.
summary(world["lifeExp"])
world_mini = world[1:2, 1:3] # world[row1:row2, column1:column3]
world_mini
View(world)
# # 2.2 Vector data
names(world)
plot(world) #plot world.
world$geom #coordinates of the country polygons.
install.packages(c("classInt", "gdtools", "leafem", "mapdeck", "mapview", "sf", "stars", "tmap", "tmaptools"))
install.packages(c("classInt", "gdtools", "mapdeck", "mapview", "sf", "stars", "tmap"))
